package com.bishe.examhelper.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.bishe.examhelper.dao.UserDao;
import com.bishe.examhelper.dao.SubjectDao;
import com.bishe.examhelper.dao.SectionDao;
import com.bishe.examhelper.dao.SingleChoiceDao;
import com.bishe.examhelper.dao.MultiChoiceDao;
import com.bishe.examhelper.dao.TrueOrFalseDao;
import com.bishe.examhelper.dao.MaterialAnalysisDao;
import com.bishe.examhelper.dao.QuestionsOfMaterialDao;
import com.bishe.examhelper.dao.ExaminationDao;
import com.bishe.examhelper.dao.QuestionTypeDao;
import com.bishe.examhelper.dao.ExamSectionDao;
import com.bishe.examhelper.dao.ExamQuestionDao;
import com.bishe.examhelper.dao.ErrorQuestionsDao;
import com.bishe.examhelper.dao.CollectionDao;
import com.bishe.examhelper.dao.QuerysDao;
import com.bishe.examhelper.dao.AnswerQueryDao;
import com.bishe.examhelper.dao.NoteDao;
import com.bishe.examhelper.dao.StudyRecordDao;
import com.bishe.examhelper.dao.GroupsDao;
import com.bishe.examhelper.dao.GroupQuestionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserDao.createTable(db, ifNotExists);
        SubjectDao.createTable(db, ifNotExists);
        SectionDao.createTable(db, ifNotExists);
        SingleChoiceDao.createTable(db, ifNotExists);
        MultiChoiceDao.createTable(db, ifNotExists);
        TrueOrFalseDao.createTable(db, ifNotExists);
        MaterialAnalysisDao.createTable(db, ifNotExists);
        QuestionsOfMaterialDao.createTable(db, ifNotExists);
        ExaminationDao.createTable(db, ifNotExists);
        QuestionTypeDao.createTable(db, ifNotExists);
        ExamSectionDao.createTable(db, ifNotExists);
        ExamQuestionDao.createTable(db, ifNotExists);
        ErrorQuestionsDao.createTable(db, ifNotExists);
        CollectionDao.createTable(db, ifNotExists);
        QuerysDao.createTable(db, ifNotExists);
        AnswerQueryDao.createTable(db, ifNotExists);
        NoteDao.createTable(db, ifNotExists);
        StudyRecordDao.createTable(db, ifNotExists);
        GroupsDao.createTable(db, ifNotExists);
        GroupQuestionDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserDao.dropTable(db, ifExists);
        SubjectDao.dropTable(db, ifExists);
        SectionDao.dropTable(db, ifExists);
        SingleChoiceDao.dropTable(db, ifExists);
        MultiChoiceDao.dropTable(db, ifExists);
        TrueOrFalseDao.dropTable(db, ifExists);
        MaterialAnalysisDao.dropTable(db, ifExists);
        QuestionsOfMaterialDao.dropTable(db, ifExists);
        ExaminationDao.dropTable(db, ifExists);
        QuestionTypeDao.dropTable(db, ifExists);
        ExamSectionDao.dropTable(db, ifExists);
        ExamQuestionDao.dropTable(db, ifExists);
        ErrorQuestionsDao.dropTable(db, ifExists);
        CollectionDao.dropTable(db, ifExists);
        QuerysDao.dropTable(db, ifExists);
        AnswerQueryDao.dropTable(db, ifExists);
        NoteDao.dropTable(db, ifExists);
        StudyRecordDao.dropTable(db, ifExists);
        GroupsDao.dropTable(db, ifExists);
        GroupQuestionDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserDao.class);
        registerDaoClass(SubjectDao.class);
        registerDaoClass(SectionDao.class);
        registerDaoClass(SingleChoiceDao.class);
        registerDaoClass(MultiChoiceDao.class);
        registerDaoClass(TrueOrFalseDao.class);
        registerDaoClass(MaterialAnalysisDao.class);
        registerDaoClass(QuestionsOfMaterialDao.class);
        registerDaoClass(ExaminationDao.class);
        registerDaoClass(QuestionTypeDao.class);
        registerDaoClass(ExamSectionDao.class);
        registerDaoClass(ExamQuestionDao.class);
        registerDaoClass(ErrorQuestionsDao.class);
        registerDaoClass(CollectionDao.class);
        registerDaoClass(QuerysDao.class);
        registerDaoClass(AnswerQueryDao.class);
        registerDaoClass(NoteDao.class);
        registerDaoClass(StudyRecordDao.class);
        registerDaoClass(GroupsDao.class);
        registerDaoClass(GroupQuestionDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
