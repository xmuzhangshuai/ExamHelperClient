package com.bishe.examhelper.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.bishe.examhelper.entities.QuestionType;
import com.bishe.examhelper.entities.Section;

import com.bishe.examhelper.entities.Groups;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUPS.
*/
public class GroupsDao extends AbstractDao<Groups, Long> {

    public static final String TABLENAME = "GROUPS";

    /**
     * Properties of entity Groups.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Question_num = new Property(1, Integer.class, "question_num", false, "QUESTION_NUM");
        public final static Property Finished_num = new Property(2, Integer.class, "finished_num", false, "FINISHED_NUM");
        public final static Property Error_num = new Property(3, Integer.class, "error_num", false, "ERROR_NUM");
        public final static Property Group_name = new Property(4, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Section_id = new Property(5, long.class, "section_id", false, "SECTION_ID");
        public final static Property QuestionType_id = new Property(6, long.class, "questionType_id", false, "QUESTION_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<Groups> section_GroupListQuery;
    private Query<Groups> questionType_GroupListQuery;

    public GroupsDao(DaoConfig config) {
        super(config);
    }
    
    public GroupsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUPS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUESTION_NUM' INTEGER," + // 1: question_num
                "'FINISHED_NUM' INTEGER," + // 2: finished_num
                "'ERROR_NUM' INTEGER," + // 3: error_num
                "'GROUP_NAME' TEXT," + // 4: group_name
                "'SECTION_ID' INTEGER NOT NULL ," + // 5: section_id
                "'QUESTION_TYPE_ID' INTEGER NOT NULL );"); // 6: questionType_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUPS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Groups entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer question_num = entity.getQuestion_num();
        if (question_num != null) {
            stmt.bindLong(2, question_num);
        }
 
        Integer finished_num = entity.getFinished_num();
        if (finished_num != null) {
            stmt.bindLong(3, finished_num);
        }
 
        Integer error_num = entity.getError_num();
        if (error_num != null) {
            stmt.bindLong(4, error_num);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(5, group_name);
        }
        stmt.bindLong(6, entity.getSection_id());
        stmt.bindLong(7, entity.getQuestionType_id());
    }

    @Override
    protected void attachEntity(Groups entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Groups readEntity(Cursor cursor, int offset) {
        Groups entity = new Groups( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // question_num
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // finished_num
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // error_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // group_name
            cursor.getLong(offset + 5), // section_id
            cursor.getLong(offset + 6) // questionType_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Groups entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion_num(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFinished_num(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setError_num(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGroup_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSection_id(cursor.getLong(offset + 5));
        entity.setQuestionType_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Groups entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Groups entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "groupList" to-many relationship of Section. */
    public List<Groups> _querySection_GroupList(long section_id) {
        synchronized (this) {
            if (section_GroupListQuery == null) {
                QueryBuilder<Groups> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Section_id.eq(null));
                section_GroupListQuery = queryBuilder.build();
            }
        }
        Query<Groups> query = section_GroupListQuery.forCurrentThread();
        query.setParameter(0, section_id);
        return query.list();
    }

    /** Internal query to resolve the "groupList" to-many relationship of QuestionType. */
    public List<Groups> _queryQuestionType_GroupList(long questionType_id) {
        synchronized (this) {
            if (questionType_GroupListQuery == null) {
                QueryBuilder<Groups> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionType_id.eq(null));
                questionType_GroupListQuery = queryBuilder.build();
            }
        }
        Query<Groups> query = questionType_GroupListQuery.forCurrentThread();
        query.setParameter(0, questionType_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSectionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getQuestionTypeDao().getAllColumns());
            builder.append(" FROM GROUPS T");
            builder.append(" LEFT JOIN SECTION T0 ON T.'SECTION_ID'=T0.'_id'");
            builder.append(" LEFT JOIN QUESTION_TYPE T1 ON T.'QUESTION_TYPE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Groups loadCurrentDeep(Cursor cursor, boolean lock) {
        Groups entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Section section = loadCurrentOther(daoSession.getSectionDao(), cursor, offset);
         if(section != null) {
            entity.setSection(section);
        }
        offset += daoSession.getSectionDao().getAllColumns().length;

        QuestionType questionType = loadCurrentOther(daoSession.getQuestionTypeDao(), cursor, offset);
         if(questionType != null) {
            entity.setQuestionType(questionType);
        }

        return entity;    
    }

    public Groups loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Groups> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Groups> list = new ArrayList<Groups>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Groups> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Groups> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
