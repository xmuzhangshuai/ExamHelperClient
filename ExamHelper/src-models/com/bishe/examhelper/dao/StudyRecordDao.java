package com.bishe.examhelper.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.bishe.examhelper.entities.QuestionType;
import com.bishe.examhelper.entities.User;

import com.bishe.examhelper.entities.StudyRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STUDY_RECORD.
*/
public class StudyRecordDao extends AbstractDao<StudyRecord, Long> {

    public static final String TABLENAME = "STUDY_RECORD";

    /**
     * Properties of entity StudyRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Question_id = new Property(1, long.class, "question_id", false, "QUESTION_ID");
        public final static Property My_answer = new Property(2, String.class, "my_answer", false, "MY_ANSWER");
        public final static Property Is_right = new Property(3, Boolean.class, "is_right", false, "IS_RIGHT");
        public final static Property Record_time = new Property(4, java.util.Date.class, "record_time", false, "RECORD_TIME");
        public final static Property User_id = new Property(5, long.class, "user_id", false, "USER_ID");
        public final static Property QuestionType_id = new Property(6, long.class, "questionType_id", false, "QUESTION_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<StudyRecord> user_StudyRecordListQuery;
    private Query<StudyRecord> questionType_StudyRecordListQuery;

    public StudyRecordDao(DaoConfig config) {
        super(config);
    }
    
    public StudyRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDY_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUESTION_ID' INTEGER NOT NULL ," + // 1: question_id
                "'MY_ANSWER' TEXT," + // 2: my_answer
                "'IS_RIGHT' INTEGER," + // 3: is_right
                "'RECORD_TIME' INTEGER," + // 4: record_time
                "'USER_ID' INTEGER NOT NULL ," + // 5: user_id
                "'QUESTION_TYPE_ID' INTEGER NOT NULL );"); // 6: questionType_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDY_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudyRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getQuestion_id());
 
        String my_answer = entity.getMy_answer();
        if (my_answer != null) {
            stmt.bindString(3, my_answer);
        }
 
        Boolean is_right = entity.getIs_right();
        if (is_right != null) {
            stmt.bindLong(4, is_right ? 1l: 0l);
        }
 
        java.util.Date record_time = entity.getRecord_time();
        if (record_time != null) {
            stmt.bindLong(5, record_time.getTime());
        }
        stmt.bindLong(6, entity.getUser_id());
        stmt.bindLong(7, entity.getQuestionType_id());
    }

    @Override
    protected void attachEntity(StudyRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StudyRecord readEntity(Cursor cursor, int offset) {
        StudyRecord entity = new StudyRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // question_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // my_answer
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // is_right
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // record_time
            cursor.getLong(offset + 5), // user_id
            cursor.getLong(offset + 6) // questionType_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudyRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion_id(cursor.getLong(offset + 1));
        entity.setMy_answer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_right(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setRecord_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUser_id(cursor.getLong(offset + 5));
        entity.setQuestionType_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StudyRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StudyRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "studyRecordList" to-many relationship of User. */
    public List<StudyRecord> _queryUser_StudyRecordList(long user_id) {
        synchronized (this) {
            if (user_StudyRecordListQuery == null) {
                QueryBuilder<StudyRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_StudyRecordListQuery = queryBuilder.build();
            }
        }
        Query<StudyRecord> query = user_StudyRecordListQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

    /** Internal query to resolve the "studyRecordList" to-many relationship of QuestionType. */
    public List<StudyRecord> _queryQuestionType_StudyRecordList(long questionType_id) {
        synchronized (this) {
            if (questionType_StudyRecordListQuery == null) {
                QueryBuilder<StudyRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionType_id.eq(null));
                questionType_StudyRecordListQuery = queryBuilder.build();
            }
        }
        Query<StudyRecord> query = questionType_StudyRecordListQuery.forCurrentThread();
        query.setParameter(0, questionType_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getQuestionTypeDao().getAllColumns());
            builder.append(" FROM STUDY_RECORD T");
            builder.append(" LEFT JOIN USER T0 ON T.'USER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN QUESTION_TYPE T1 ON T.'QUESTION_TYPE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StudyRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        StudyRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        QuestionType questionType = loadCurrentOther(daoSession.getQuestionTypeDao(), cursor, offset);
         if(questionType != null) {
            entity.setQuestionType(questionType);
        }

        return entity;    
    }

    public StudyRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StudyRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StudyRecord> list = new ArrayList<StudyRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StudyRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StudyRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
