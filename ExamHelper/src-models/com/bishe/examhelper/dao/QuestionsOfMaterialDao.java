package com.bishe.examhelper.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.bishe.examhelper.entities.MaterialAnalysis;

import com.bishe.examhelper.entities.QuestionsOfMaterial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESTIONS_OF_MATERIAL.
*/
public class QuestionsOfMaterialDao extends AbstractDao<QuestionsOfMaterial, Long> {

    public static final String TABLENAME = "QUESTIONS_OF_MATERIAL";

    /**
     * Properties of entity QuestionsOfMaterial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qusetion_number = new Property(1, Integer.class, "qusetion_number", false, "QUSETION_NUMBER");
        public final static Property Question_stem = new Property(2, String.class, "question_stem", false, "QUESTION_STEM");
        public final static Property Answer = new Property(3, String.class, "answer", false, "ANSWER");
        public final static Property Analysis = new Property(4, String.class, "analysis", false, "ANALYSIS");
        public final static Property Score = new Property(5, Integer.class, "score", false, "SCORE");
        public final static Property Material_id = new Property(6, long.class, "material_id", false, "MATERIAL_ID");
    };

    private DaoSession daoSession;

    private Query<QuestionsOfMaterial> materialAnalysis_QuestionsOfMaterialListQuery;

    public QuestionsOfMaterialDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionsOfMaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTIONS_OF_MATERIAL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUSETION_NUMBER' INTEGER," + // 1: qusetion_number
                "'QUESTION_STEM' TEXT," + // 2: question_stem
                "'ANSWER' TEXT," + // 3: answer
                "'ANALYSIS' TEXT," + // 4: analysis
                "'SCORE' INTEGER," + // 5: score
                "'MATERIAL_ID' INTEGER NOT NULL );"); // 6: material_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTIONS_OF_MATERIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionsOfMaterial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qusetion_number = entity.getQusetion_number();
        if (qusetion_number != null) {
            stmt.bindLong(2, qusetion_number);
        }
 
        String question_stem = entity.getQuestion_stem();
        if (question_stem != null) {
            stmt.bindString(3, question_stem);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(5, analysis);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(6, score);
        }
        stmt.bindLong(7, entity.getMaterial_id());
    }

    @Override
    protected void attachEntity(QuestionsOfMaterial entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QuestionsOfMaterial readEntity(Cursor cursor, int offset) {
        QuestionsOfMaterial entity = new QuestionsOfMaterial( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // qusetion_number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // question_stem
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // analysis
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // score
            cursor.getLong(offset + 6) // material_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuestionsOfMaterial entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQusetion_number(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setQuestion_stem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnalysis(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMaterial_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QuestionsOfMaterial entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QuestionsOfMaterial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questionsOfMaterialList" to-many relationship of MaterialAnalysis. */
    public List<QuestionsOfMaterial> _queryMaterialAnalysis_QuestionsOfMaterialList(long material_id) {
        synchronized (this) {
            if (materialAnalysis_QuestionsOfMaterialListQuery == null) {
                QueryBuilder<QuestionsOfMaterial> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Material_id.eq(null));
                materialAnalysis_QuestionsOfMaterialListQuery = queryBuilder.build();
            }
        }
        Query<QuestionsOfMaterial> query = materialAnalysis_QuestionsOfMaterialListQuery.forCurrentThread();
        query.setParameter(0, material_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMaterialAnalysisDao().getAllColumns());
            builder.append(" FROM QUESTIONS_OF_MATERIAL T");
            builder.append(" LEFT JOIN MATERIAL_ANALYSIS T0 ON T.'MATERIAL_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected QuestionsOfMaterial loadCurrentDeep(Cursor cursor, boolean lock) {
        QuestionsOfMaterial entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MaterialAnalysis materialAnalysis = loadCurrentOther(daoSession.getMaterialAnalysisDao(), cursor, offset);
         if(materialAnalysis != null) {
            entity.setMaterialAnalysis(materialAnalysis);
        }

        return entity;    
    }

    public QuestionsOfMaterial loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<QuestionsOfMaterial> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<QuestionsOfMaterial> list = new ArrayList<QuestionsOfMaterial>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<QuestionsOfMaterial> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<QuestionsOfMaterial> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
