package com.bishe.examhelper.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.bishe.examhelper.entities.Section;

import com.bishe.examhelper.entities.MultiChoice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MULTI_CHOICE.
*/
public class MultiChoiceDao extends AbstractDao<MultiChoice, Long> {

    public static final String TABLENAME = "MULTI_CHOICE";

    /**
     * Properties of entity MultiChoice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Question_stem = new Property(1, String.class, "question_stem", false, "QUESTION_STEM");
        public final static Property OptionA = new Property(2, String.class, "optionA", false, "OPTION_A");
        public final static Property OptionB = new Property(3, String.class, "optionB", false, "OPTION_B");
        public final static Property OptionC = new Property(4, String.class, "optionC", false, "OPTION_C");
        public final static Property OptionD = new Property(5, String.class, "optionD", false, "OPTION_D");
        public final static Property OptionE = new Property(6, String.class, "optionE", false, "OPTION_E");
        public final static Property OptionF = new Property(7, String.class, "optionF", false, "OPTION_F");
        public final static Property AnswerA = new Property(8, Boolean.class, "answerA", false, "ANSWER_A");
        public final static Property AnswerB = new Property(9, Boolean.class, "answerB", false, "ANSWER_B");
        public final static Property AnswerC = new Property(10, Boolean.class, "answerC", false, "ANSWER_C");
        public final static Property AnswerD = new Property(11, Boolean.class, "answerD", false, "ANSWER_D");
        public final static Property AnswerE = new Property(12, Boolean.class, "answerE", false, "ANSWER_E");
        public final static Property AnswerF = new Property(13, Boolean.class, "answerF", false, "ANSWER_F");
        public final static Property Analysis = new Property(14, String.class, "analysis", false, "ANALYSIS");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
        public final static Property Flag = new Property(16, Boolean.class, "flag", false, "FLAG");
        public final static Property Section_id = new Property(17, long.class, "section_id", false, "SECTION_ID");
    };

    private DaoSession daoSession;

    private Query<MultiChoice> section_MultiChoiceListQuery;

    public MultiChoiceDao(DaoConfig config) {
        super(config);
    }
    
    public MultiChoiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MULTI_CHOICE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUESTION_STEM' TEXT NOT NULL ," + // 1: question_stem
                "'OPTION_A' TEXT," + // 2: optionA
                "'OPTION_B' TEXT," + // 3: optionB
                "'OPTION_C' TEXT," + // 4: optionC
                "'OPTION_D' TEXT," + // 5: optionD
                "'OPTION_E' TEXT," + // 6: optionE
                "'OPTION_F' TEXT," + // 7: optionF
                "'ANSWER_A' INTEGER," + // 8: answerA
                "'ANSWER_B' INTEGER," + // 9: answerB
                "'ANSWER_C' INTEGER," + // 10: answerC
                "'ANSWER_D' INTEGER," + // 11: answerD
                "'ANSWER_E' INTEGER," + // 12: answerE
                "'ANSWER_F' INTEGER," + // 13: answerF
                "'ANALYSIS' TEXT," + // 14: analysis
                "'REMARK' TEXT," + // 15: remark
                "'FLAG' INTEGER," + // 16: flag
                "'SECTION_ID' INTEGER NOT NULL );"); // 17: section_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MULTI_CHOICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MultiChoice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getQuestion_stem());
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(3, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(4, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(5, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(6, optionD);
        }
 
        String optionE = entity.getOptionE();
        if (optionE != null) {
            stmt.bindString(7, optionE);
        }
 
        String optionF = entity.getOptionF();
        if (optionF != null) {
            stmt.bindString(8, optionF);
        }
 
        Boolean answerA = entity.getAnswerA();
        if (answerA != null) {
            stmt.bindLong(9, answerA ? 1l: 0l);
        }
 
        Boolean answerB = entity.getAnswerB();
        if (answerB != null) {
            stmt.bindLong(10, answerB ? 1l: 0l);
        }
 
        Boolean answerC = entity.getAnswerC();
        if (answerC != null) {
            stmt.bindLong(11, answerC ? 1l: 0l);
        }
 
        Boolean answerD = entity.getAnswerD();
        if (answerD != null) {
            stmt.bindLong(12, answerD ? 1l: 0l);
        }
 
        Boolean answerE = entity.getAnswerE();
        if (answerE != null) {
            stmt.bindLong(13, answerE ? 1l: 0l);
        }
 
        Boolean answerF = entity.getAnswerF();
        if (answerF != null) {
            stmt.bindLong(14, answerF ? 1l: 0l);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(15, analysis);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
 
        Boolean flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(17, flag ? 1l: 0l);
        }
        stmt.bindLong(18, entity.getSection_id());
    }

    @Override
    protected void attachEntity(MultiChoice entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MultiChoice readEntity(Cursor cursor, int offset) {
        MultiChoice entity = new MultiChoice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // question_stem
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // optionA
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // optionB
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // optionC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // optionD
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // optionE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // optionF
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // answerA
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // answerB
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // answerC
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // answerD
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // answerE
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // answerF
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // analysis
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remark
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // flag
            cursor.getLong(offset + 17) // section_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MultiChoice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion_stem(cursor.getString(offset + 1));
        entity.setOptionA(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptionB(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOptionC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptionD(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOptionE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOptionF(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswerA(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setAnswerB(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setAnswerC(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setAnswerD(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setAnswerE(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setAnswerF(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setAnalysis(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFlag(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setSection_id(cursor.getLong(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MultiChoice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MultiChoice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "multiChoiceList" to-many relationship of Section. */
    public List<MultiChoice> _querySection_MultiChoiceList(long section_id) {
        synchronized (this) {
            if (section_MultiChoiceListQuery == null) {
                QueryBuilder<MultiChoice> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Section_id.eq(null));
                section_MultiChoiceListQuery = queryBuilder.build();
            }
        }
        Query<MultiChoice> query = section_MultiChoiceListQuery.forCurrentThread();
        query.setParameter(0, section_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSectionDao().getAllColumns());
            builder.append(" FROM MULTI_CHOICE T");
            builder.append(" LEFT JOIN SECTION T0 ON T.'SECTION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MultiChoice loadCurrentDeep(Cursor cursor, boolean lock) {
        MultiChoice entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Section section = loadCurrentOther(daoSession.getSectionDao(), cursor, offset);
         if(section != null) {
            entity.setSection(section);
        }

        return entity;    
    }

    public MultiChoice loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MultiChoice> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MultiChoice> list = new ArrayList<MultiChoice>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MultiChoice> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MultiChoice> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
