package com.bishe.examhelper.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bishe.examhelper.entities.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mail = new Property(1, String.class, "mail", false, "MAIL");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Realname = new Property(4, String.class, "realname", false, "REALNAME");
        public final static Property Age = new Property(5, Integer.class, "age", false, "AGE");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property User_state = new Property(8, String.class, "user_state", false, "USER_STATE");
        public final static Property Profession = new Property(9, String.class, "profession", false, "PROFESSION");
        public final static Property Area = new Property(10, String.class, "area", false, "AREA");
        public final static Property Integral = new Property(11, Integer.class, "integral", false, "INTEGRAL");
        public final static Property Avatar = new Property(12, String.class, "avatar", false, "AVATAR");
        public final static Property Current = new Property(13, Boolean.class, "current", false, "CURRENT");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MAIL' TEXT NOT NULL ," + // 1: mail
                "'PASSWORD' TEXT NOT NULL ," + // 2: password
                "'NICKNAME' TEXT," + // 3: nickname
                "'REALNAME' TEXT," + // 4: realname
                "'AGE' INTEGER," + // 5: age
                "'PHONE' TEXT," + // 6: phone
                "'GENDER' TEXT," + // 7: gender
                "'USER_STATE' TEXT," + // 8: user_state
                "'PROFESSION' TEXT," + // 9: profession
                "'AREA' TEXT," + // 10: area
                "'INTEGRAL' INTEGER," + // 11: integral
                "'AVATAR' TEXT," + // 12: avatar
                "'CURRENT' INTEGER);"); // 13: current
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMail());
        stmt.bindString(3, entity.getPassword());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(5, realname);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(6, age);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String user_state = entity.getUser_state();
        if (user_state != null) {
            stmt.bindString(9, user_state);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(10, profession);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(11, area);
        }
 
        Integer integral = entity.getIntegral();
        if (integral != null) {
            stmt.bindLong(12, integral);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(13, avatar);
        }
 
        Boolean current = entity.getCurrent();
        if (current != null) {
            stmt.bindLong(14, current ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // mail
            cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // realname
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_state
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // profession
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // area
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // integral
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // avatar
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // current
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMail(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAge(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_state(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProfession(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArea(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIntegral(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAvatar(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCurrent(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
