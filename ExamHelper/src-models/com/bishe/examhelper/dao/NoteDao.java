package com.bishe.examhelper.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.bishe.examhelper.entities.QuestionType;
import com.bishe.examhelper.entities.User;

import com.bishe.examhelper.entities.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Question_id = new Property(1, long.class, "question_id", false, "QUESTION_ID");
        public final static Property Note_time = new Property(2, java.util.Date.class, "note_time", false, "NOTE_TIME");
        public final static Property Note_content = new Property(3, String.class, "note_content", false, "NOTE_CONTENT");
        public final static Property User_id = new Property(4, long.class, "user_id", false, "USER_ID");
        public final static Property QuestionType_id = new Property(5, long.class, "questionType_id", false, "QUESTION_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<Note> user_NoteListQuery;
    private Query<Note> questionType_NoteListQuery;

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUESTION_ID' INTEGER NOT NULL ," + // 1: question_id
                "'NOTE_TIME' INTEGER," + // 2: note_time
                "'NOTE_CONTENT' TEXT," + // 3: note_content
                "'USER_ID' INTEGER NOT NULL ," + // 4: user_id
                "'QUESTION_TYPE_ID' INTEGER NOT NULL );"); // 5: questionType_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getQuestion_id());
 
        java.util.Date note_time = entity.getNote_time();
        if (note_time != null) {
            stmt.bindLong(3, note_time.getTime());
        }
 
        String note_content = entity.getNote_content();
        if (note_content != null) {
            stmt.bindString(4, note_content);
        }
        stmt.bindLong(5, entity.getUser_id());
        stmt.bindLong(6, entity.getQuestionType_id());
    }

    @Override
    protected void attachEntity(Note entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // question_id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // note_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note_content
            cursor.getLong(offset + 4), // user_id
            cursor.getLong(offset + 5) // questionType_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion_id(cursor.getLong(offset + 1));
        entity.setNote_time(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNote_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.getLong(offset + 4));
        entity.setQuestionType_id(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "noteList" to-many relationship of User. */
    public List<Note> _queryUser_NoteList(long user_id) {
        synchronized (this) {
            if (user_NoteListQuery == null) {
                QueryBuilder<Note> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_NoteListQuery = queryBuilder.build();
            }
        }
        Query<Note> query = user_NoteListQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

    /** Internal query to resolve the "noteList" to-many relationship of QuestionType. */
    public List<Note> _queryQuestionType_NoteList(long questionType_id) {
        synchronized (this) {
            if (questionType_NoteListQuery == null) {
                QueryBuilder<Note> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionType_id.eq(null));
                questionType_NoteListQuery = queryBuilder.build();
            }
        }
        Query<Note> query = questionType_NoteListQuery.forCurrentThread();
        query.setParameter(0, questionType_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getQuestionTypeDao().getAllColumns());
            builder.append(" FROM NOTE T");
            builder.append(" LEFT JOIN USER T0 ON T.'USER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN QUESTION_TYPE T1 ON T.'QUESTION_TYPE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Note loadCurrentDeep(Cursor cursor, boolean lock) {
        Note entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        QuestionType questionType = loadCurrentOther(daoSession.getQuestionTypeDao(), cursor, offset);
         if(questionType != null) {
            entity.setQuestionType(questionType);
        }

        return entity;    
    }

    public Note loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Note> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Note> list = new ArrayList<Note>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Note> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Note> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
