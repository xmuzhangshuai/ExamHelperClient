package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.AnswerQueryDao;
import com.bishe.examhelper.dao.QuerysDao;
import com.bishe.examhelper.dao.QuestionTypeDao;
import com.bishe.examhelper.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table QUERYS.
 */
public class Querys implements java.io.Serializable {

    private Long id;
    private long question_id;
    private java.util.Date query_time;
    private String query_stem;
    private Integer integral;
    private Long adopt_user_id;
    private long user_id;
    private long questionType_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuerysDao myDao;

    private User user;
    private Long user__resolvedKey;

    private QuestionType questionType;
    private Long questionType__resolvedKey;

    private List<AnswerQuery> answerQueryList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Querys() {
    }

    public Querys(Long id) {
        this.id = id;
    }

    public Querys(Long id, long question_id, java.util.Date query_time, String query_stem, Integer integral, Long adopt_user_id, long user_id, long questionType_id) {
        this.id = id;
        this.question_id = question_id;
        this.query_time = query_time;
        this.query_stem = query_stem;
        this.integral = integral;
        this.adopt_user_id = adopt_user_id;
        this.user_id = user_id;
        this.questionType_id = questionType_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuerysDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(long question_id) {
        this.question_id = question_id;
    }

    public java.util.Date getQuery_time() {
        return query_time;
    }

    public void setQuery_time(java.util.Date query_time) {
        this.query_time = query_time;
    }

    public String getQuery_stem() {
        return query_stem;
    }

    public void setQuery_stem(String query_stem) {
        this.query_stem = query_stem;
    }

    public Integer getIntegral() {
        return integral;
    }

    public void setIntegral(Integer integral) {
        this.integral = integral;
    }

    public Long getAdopt_user_id() {
        return adopt_user_id;
    }

    public void setAdopt_user_id(Long adopt_user_id) {
        this.adopt_user_id = adopt_user_id;
    }

    public long getUser_id() {
        return user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    public long getQuestionType_id() {
        return questionType_id;
    }

    public void setQuestionType_id(long questionType_id) {
        this.questionType_id = questionType_id;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        if (user == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            user_id = user.getId();
            user__resolvedKey = user_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public QuestionType getQuestionType() {
        long __key = this.questionType_id;
        if (questionType__resolvedKey == null || !questionType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionTypeDao targetDao = daoSession.getQuestionTypeDao();
            QuestionType questionTypeNew = targetDao.load(__key);
            synchronized (this) {
                questionType = questionTypeNew;
            	questionType__resolvedKey = __key;
            }
        }
        return questionType;
    }

    public void setQuestionType(QuestionType questionType) {
        if (questionType == null) {
            throw new DaoException("To-one property 'questionType_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.questionType = questionType;
            questionType_id = questionType.getId();
            questionType__resolvedKey = questionType_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<AnswerQuery> getAnswerQueryList() {
        if (answerQueryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerQueryDao targetDao = daoSession.getAnswerQueryDao();
            List<AnswerQuery> answerQueryListNew = targetDao._queryQuerys_AnswerQueryList(id);
            synchronized (this) {
                if(answerQueryList == null) {
                    answerQueryList = answerQueryListNew;
                }
            }
        }
        return answerQueryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswerQueryList() {
        answerQueryList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
