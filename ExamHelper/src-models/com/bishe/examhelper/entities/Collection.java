package com.bishe.examhelper.entities;

import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.CollectionDao;
import com.bishe.examhelper.dao.QuestionTypeDao;
import com.bishe.examhelper.dao.SectionDao;
import com.bishe.examhelper.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table COLLECTION.
 */
public class Collection implements java.io.Serializable {

    private Long id;
    private long question_id;
    private java.util.Date collect_time;
    private long user_id;
    private long questionType_id;
    private long section_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CollectionDao myDao;

    private User user;
    private Long user__resolvedKey;

    private QuestionType questionType;
    private Long questionType__resolvedKey;

    private Section section;
    private Long section__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Collection() {
    }

    public Collection(Long id) {
        this.id = id;
    }

    public Collection(Long id, long question_id, java.util.Date collect_time, long user_id, long questionType_id, long section_id) {
        this.id = id;
        this.question_id = question_id;
        this.collect_time = collect_time;
        this.user_id = user_id;
        this.questionType_id = questionType_id;
        this.section_id = section_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCollectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(long question_id) {
        this.question_id = question_id;
    }

    public java.util.Date getCollect_time() {
        return collect_time;
    }

    public void setCollect_time(java.util.Date collect_time) {
        this.collect_time = collect_time;
    }

    public long getUser_id() {
        return user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    public long getQuestionType_id() {
        return questionType_id;
    }

    public void setQuestionType_id(long questionType_id) {
        this.questionType_id = questionType_id;
    }

    public long getSection_id() {
        return section_id;
    }

    public void setSection_id(long section_id) {
        this.section_id = section_id;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        if (user == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            user_id = user.getId();
            user__resolvedKey = user_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public QuestionType getQuestionType() {
        long __key = this.questionType_id;
        if (questionType__resolvedKey == null || !questionType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionTypeDao targetDao = daoSession.getQuestionTypeDao();
            QuestionType questionTypeNew = targetDao.load(__key);
            synchronized (this) {
                questionType = questionTypeNew;
            	questionType__resolvedKey = __key;
            }
        }
        return questionType;
    }

    public void setQuestionType(QuestionType questionType) {
        if (questionType == null) {
            throw new DaoException("To-one property 'questionType_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.questionType = questionType;
            questionType_id = questionType.getId();
            questionType__resolvedKey = questionType_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Section getSection() {
        long __key = this.section_id;
        if (section__resolvedKey == null || !section__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SectionDao targetDao = daoSession.getSectionDao();
            Section sectionNew = targetDao.load(__key);
            synchronized (this) {
                section = sectionNew;
            	section__resolvedKey = __key;
            }
        }
        return section;
    }

    public void setSection(Section section) {
        if (section == null) {
            throw new DaoException("To-one property 'section_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.section = section;
            section_id = section.getId();
            section__resolvedKey = section_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
