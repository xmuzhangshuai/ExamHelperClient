package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.ExamSectionDao;
import com.bishe.examhelper.dao.ExaminationDao;
import com.bishe.examhelper.dao.SubjectDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table EXAMINATION.
 */
public class Examination implements java.io.Serializable {

    private Long id;
    private String exam_type;
    private String exam_name;
    private String exam_request;
    private Integer exam_time;
    private long subject_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExaminationDao myDao;

    private Subject subject;
    private Long subject__resolvedKey;

    private List<ExamSection> examSectionList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Examination() {
    }

    public Examination(Long id) {
        this.id = id;
    }

    public Examination(Long id, String exam_type, String exam_name, String exam_request, Integer exam_time, long subject_id) {
        this.id = id;
        this.exam_type = exam_type;
        this.exam_name = exam_name;
        this.exam_request = exam_request;
        this.exam_time = exam_time;
        this.subject_id = subject_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExaminationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getExam_type() {
        return exam_type;
    }

    public void setExam_type(String exam_type) {
        this.exam_type = exam_type;
    }

    public String getExam_name() {
        return exam_name;
    }

    public void setExam_name(String exam_name) {
        this.exam_name = exam_name;
    }

    public String getExam_request() {
        return exam_request;
    }

    public void setExam_request(String exam_request) {
        this.exam_request = exam_request;
    }

    public Integer getExam_time() {
        return exam_time;
    }

    public void setExam_time(Integer exam_time) {
        this.exam_time = exam_time;
    }

    public long getSubject_id() {
        return subject_id;
    }

    public void setSubject_id(long subject_id) {
        this.subject_id = subject_id;
    }

    /** To-one relationship, resolved on first access. */
    public Subject getSubject() {
        long __key = this.subject_id;
        if (subject__resolvedKey == null || !subject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubjectDao targetDao = daoSession.getSubjectDao();
            Subject subjectNew = targetDao.load(__key);
            synchronized (this) {
                subject = subjectNew;
            	subject__resolvedKey = __key;
            }
        }
        return subject;
    }

    public void setSubject(Subject subject) {
        if (subject == null) {
            throw new DaoException("To-one property 'subject_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.subject = subject;
            subject_id = subject.getId();
            subject__resolvedKey = subject_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ExamSection> getExamSectionList() {
        if (examSectionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExamSectionDao targetDao = daoSession.getExamSectionDao();
            List<ExamSection> examSectionListNew = targetDao._queryExamination_ExamSectionList(id);
            synchronized (this) {
                if(examSectionList == null) {
                    examSectionList = examSectionListNew;
                }
            }
        }
        return examSectionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExamSectionList() {
        examSectionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
