package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.CollectionDao;
import com.bishe.examhelper.dao.ErrorQuestionsDao;
import com.bishe.examhelper.dao.ExamSectionDao;
import com.bishe.examhelper.dao.GroupsDao;
import com.bishe.examhelper.dao.NoteDao;
import com.bishe.examhelper.dao.QuerysDao;
import com.bishe.examhelper.dao.QuestionTypeDao;
import com.bishe.examhelper.dao.StudyRecordDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table QUESTION_TYPE.
 */
public class QuestionType implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String type_name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionTypeDao myDao;

    private List<ExamSection> examSectionList;
    private List<ErrorQuestions> errorQuestionsList;
    private List<Collection> collectionQuestionsList;
    private List<Querys> queryList;
    private List<Note> noteList;
    private List<StudyRecord> studyRecordList;
    private List<Groups> groupList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public QuestionType() {
    }

    public QuestionType(Long id) {
        this.id = id;
    }

    public QuestionType(Long id, String type_name) {
        this.id = id;
        this.type_name = type_name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getType_name() {
        return type_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType_name(String type_name) {
        this.type_name = type_name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ExamSection> getExamSectionList() {
        if (examSectionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExamSectionDao targetDao = daoSession.getExamSectionDao();
            List<ExamSection> examSectionListNew = targetDao._queryQuestionType_ExamSectionList(id);
            synchronized (this) {
                if(examSectionList == null) {
                    examSectionList = examSectionListNew;
                }
            }
        }
        return examSectionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExamSectionList() {
        examSectionList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ErrorQuestions> getErrorQuestionsList() {
        if (errorQuestionsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ErrorQuestionsDao targetDao = daoSession.getErrorQuestionsDao();
            List<ErrorQuestions> errorQuestionsListNew = targetDao._queryQuestionType_ErrorQuestionsList(id);
            synchronized (this) {
                if(errorQuestionsList == null) {
                    errorQuestionsList = errorQuestionsListNew;
                }
            }
        }
        return errorQuestionsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetErrorQuestionsList() {
        errorQuestionsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Collection> getCollectionQuestionsList() {
        if (collectionQuestionsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CollectionDao targetDao = daoSession.getCollectionDao();
            List<Collection> collectionQuestionsListNew = targetDao._queryQuestionType_CollectionQuestionsList(id);
            synchronized (this) {
                if(collectionQuestionsList == null) {
                    collectionQuestionsList = collectionQuestionsListNew;
                }
            }
        }
        return collectionQuestionsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCollectionQuestionsList() {
        collectionQuestionsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Querys> getQueryList() {
        if (queryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuerysDao targetDao = daoSession.getQuerysDao();
            List<Querys> queryListNew = targetDao._queryQuestionType_QueryList(id);
            synchronized (this) {
                if(queryList == null) {
                    queryList = queryListNew;
                }
            }
        }
        return queryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQueryList() {
        queryList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Note> getNoteList() {
        if (noteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteDao targetDao = daoSession.getNoteDao();
            List<Note> noteListNew = targetDao._queryQuestionType_NoteList(id);
            synchronized (this) {
                if(noteList == null) {
                    noteList = noteListNew;
                }
            }
        }
        return noteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoteList() {
        noteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudyRecord> getStudyRecordList() {
        if (studyRecordList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudyRecordDao targetDao = daoSession.getStudyRecordDao();
            List<StudyRecord> studyRecordListNew = targetDao._queryQuestionType_StudyRecordList(id);
            synchronized (this) {
                if(studyRecordList == null) {
                    studyRecordList = studyRecordListNew;
                }
            }
        }
        return studyRecordList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudyRecordList() {
        studyRecordList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Groups> getGroupList() {
        if (groupList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupsDao targetDao = daoSession.getGroupsDao();
            List<Groups> groupListNew = targetDao._queryQuestionType_GroupList(id);
            synchronized (this) {
                if(groupList == null) {
                    groupList = groupListNew;
                }
            }
        }
        return groupList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroupList() {
        groupList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
