package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.MaterialAnalysisDao;
import com.bishe.examhelper.dao.QuestionsOfMaterialDao;
import com.bishe.examhelper.dao.SectionDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MATERIAL_ANALYSIS.
 */
public class MaterialAnalysis extends Question  implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String material;
    private byte[] material_image;
    private String remark;
    private Boolean flag;
    private long section_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MaterialAnalysisDao myDao;

    private Section section;
    private Long section__resolvedKey;

    private List<QuestionsOfMaterial> questionsOfMaterialList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MaterialAnalysis() {
    }

    public MaterialAnalysis(Long id) {
        this.id = id;
    }

    public MaterialAnalysis(Long id, String material, byte[] material_image, String remark, Boolean flag, long section_id) {
        this.id = id;
        this.material = material;
        this.material_image = material_image;
        this.remark = remark;
        this.flag = flag;
        this.section_id = section_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMaterialAnalysisDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMaterial() {
        return material;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMaterial(String material) {
        this.material = material;
    }

    public byte[] getMaterial_image() {
        return material_image;
    }

    public void setMaterial_image(byte[] material_image) {
        this.material_image = material_image;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    public Boolean getFlag() {
        return flag;
    }

    public void setFlag(Boolean flag) {
        this.flag = flag;
    }

    public long getSection_id() {
        return section_id;
    }

    public void setSection_id(long section_id) {
        this.section_id = section_id;
    }

    /** To-one relationship, resolved on first access. */
    public Section getSection() {
        long __key = this.section_id;
        if (section__resolvedKey == null || !section__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SectionDao targetDao = daoSession.getSectionDao();
            Section sectionNew = targetDao.load(__key);
            synchronized (this) {
                section = sectionNew;
            	section__resolvedKey = __key;
            }
        }
        return section;
    }

    public void setSection(Section section) {
        if (section == null) {
            throw new DaoException("To-one property 'section_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.section = section;
            section_id = section.getId();
            section__resolvedKey = section_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<QuestionsOfMaterial> getQuestionsOfMaterialList() {
        if (questionsOfMaterialList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionsOfMaterialDao targetDao = daoSession.getQuestionsOfMaterialDao();
            List<QuestionsOfMaterial> questionsOfMaterialListNew = targetDao._queryMaterialAnalysis_QuestionsOfMaterialList(id);
            synchronized (this) {
                if(questionsOfMaterialList == null) {
                    questionsOfMaterialList = questionsOfMaterialListNew;
                }
            }
        }
        return questionsOfMaterialList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuestionsOfMaterialList() {
        questionsOfMaterialList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
