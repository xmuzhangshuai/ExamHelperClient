package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.AnswerQueryDao;
import com.bishe.examhelper.dao.CollectionDao;
import com.bishe.examhelper.dao.ErrorQuestionsDao;
import com.bishe.examhelper.dao.NoteDao;
import com.bishe.examhelper.dao.QuerysDao;
import com.bishe.examhelper.dao.StudyRecordDao;
import com.bishe.examhelper.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table USER.
 */
public class User implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String mail;
    /** Not-null value. */
    private String password;
    private String nickname;
    private String realname;
    private Integer age;
    private String phone;
    private String gender;
    private String user_state;
    private String profession;
    private String area;
    private Integer integral;
    private byte[] avatar;
    private byte[] small_avatar;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<ErrorQuestions> errorQuestionsList;
    private List<Collection> collectionQuestionsList;
    private List<Querys> queryList;
    private List<AnswerQuery> answerQueryList;
    private List<Note> noteList;
    private List<StudyRecord> studyRecordList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String mail, String password, String nickname, String realname, Integer age, String phone, String gender, String user_state, String profession, String area, Integer integral, byte[] avatar, byte[] small_avatar) {
        this.id = id;
        this.mail = mail;
        this.password = password;
        this.nickname = nickname;
        this.realname = realname;
        this.age = age;
        this.phone = phone;
        this.gender = gender;
        this.user_state = user_state;
        this.profession = profession;
        this.area = area;
        this.integral = integral;
        this.avatar = avatar;
        this.small_avatar = small_avatar;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMail() {
        return mail;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMail(String mail) {
        this.mail = mail;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public String getRealname() {
        return realname;
    }

    public void setRealname(String realname) {
        this.realname = realname;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getUser_state() {
        return user_state;
    }

    public void setUser_state(String user_state) {
        this.user_state = user_state;
    }

    public String getProfession() {
        return profession;
    }

    public void setProfession(String profession) {
        this.profession = profession;
    }

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public Integer getIntegral() {
        return integral;
    }

    public void setIntegral(Integer integral) {
        this.integral = integral;
    }

    public byte[] getAvatar() {
        return avatar;
    }

    public void setAvatar(byte[] avatar) {
        this.avatar = avatar;
    }

    public byte[] getSmall_avatar() {
        return small_avatar;
    }

    public void setSmall_avatar(byte[] small_avatar) {
        this.small_avatar = small_avatar;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ErrorQuestions> getErrorQuestionsList() {
        if (errorQuestionsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ErrorQuestionsDao targetDao = daoSession.getErrorQuestionsDao();
            List<ErrorQuestions> errorQuestionsListNew = targetDao._queryUser_ErrorQuestionsList(id);
            synchronized (this) {
                if(errorQuestionsList == null) {
                    errorQuestionsList = errorQuestionsListNew;
                }
            }
        }
        return errorQuestionsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetErrorQuestionsList() {
        errorQuestionsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Collection> getCollectionQuestionsList() {
        if (collectionQuestionsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CollectionDao targetDao = daoSession.getCollectionDao();
            List<Collection> collectionQuestionsListNew = targetDao._queryUser_CollectionQuestionsList(id);
            synchronized (this) {
                if(collectionQuestionsList == null) {
                    collectionQuestionsList = collectionQuestionsListNew;
                }
            }
        }
        return collectionQuestionsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCollectionQuestionsList() {
        collectionQuestionsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Querys> getQueryList() {
        if (queryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuerysDao targetDao = daoSession.getQuerysDao();
            List<Querys> queryListNew = targetDao._queryUser_QueryList(id);
            synchronized (this) {
                if(queryList == null) {
                    queryList = queryListNew;
                }
            }
        }
        return queryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQueryList() {
        queryList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<AnswerQuery> getAnswerQueryList() {
        if (answerQueryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerQueryDao targetDao = daoSession.getAnswerQueryDao();
            List<AnswerQuery> answerQueryListNew = targetDao._queryUser_AnswerQueryList(id);
            synchronized (this) {
                if(answerQueryList == null) {
                    answerQueryList = answerQueryListNew;
                }
            }
        }
        return answerQueryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswerQueryList() {
        answerQueryList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Note> getNoteList() {
        if (noteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteDao targetDao = daoSession.getNoteDao();
            List<Note> noteListNew = targetDao._queryUser_NoteList(id);
            synchronized (this) {
                if(noteList == null) {
                    noteList = noteListNew;
                }
            }
        }
        return noteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoteList() {
        noteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudyRecord> getStudyRecordList() {
        if (studyRecordList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudyRecordDao targetDao = daoSession.getStudyRecordDao();
            List<StudyRecord> studyRecordListNew = targetDao._queryUser_StudyRecordList(id);
            synchronized (this) {
                if(studyRecordList == null) {
                    studyRecordList = studyRecordListNew;
                }
            }
        }
        return studyRecordList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudyRecordList() {
        studyRecordList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
