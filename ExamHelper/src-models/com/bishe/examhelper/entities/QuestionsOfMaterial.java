package com.bishe.examhelper.entities;

import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.MaterialAnalysisDao;
import com.bishe.examhelper.dao.QuestionsOfMaterialDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table QUESTIONS_OF_MATERIAL.
 */
public class QuestionsOfMaterial implements java.io.Serializable {

    private Long id;
    private Integer qusetion_number;
    private String question_stem;
    private String answer;
    private String analysis;
    private Integer score;
    private long material_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionsOfMaterialDao myDao;

    private MaterialAnalysis materialAnalysis;
    private Long materialAnalysis__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public QuestionsOfMaterial() {
    }

    public QuestionsOfMaterial(Long id) {
        this.id = id;
    }

    public QuestionsOfMaterial(Long id, Integer qusetion_number, String question_stem, String answer, String analysis, Integer score, long material_id) {
        this.id = id;
        this.qusetion_number = qusetion_number;
        this.question_stem = question_stem;
        this.answer = answer;
        this.analysis = analysis;
        this.score = score;
        this.material_id = material_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionsOfMaterialDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getQusetion_number() {
        return qusetion_number;
    }

    public void setQusetion_number(Integer qusetion_number) {
        this.qusetion_number = qusetion_number;
    }

    public String getQuestion_stem() {
        return question_stem;
    }

    public void setQuestion_stem(String question_stem) {
        this.question_stem = question_stem;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    public String getAnalysis() {
        return analysis;
    }

    public void setAnalysis(String analysis) {
        this.analysis = analysis;
    }

    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }

    public long getMaterial_id() {
        return material_id;
    }

    public void setMaterial_id(long material_id) {
        this.material_id = material_id;
    }

    /** To-one relationship, resolved on first access. */
    public MaterialAnalysis getMaterialAnalysis() {
        long __key = this.material_id;
        if (materialAnalysis__resolvedKey == null || !materialAnalysis__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MaterialAnalysisDao targetDao = daoSession.getMaterialAnalysisDao();
            MaterialAnalysis materialAnalysisNew = targetDao.load(__key);
            synchronized (this) {
                materialAnalysis = materialAnalysisNew;
            	materialAnalysis__resolvedKey = __key;
            }
        }
        return materialAnalysis;
    }

    public void setMaterialAnalysis(MaterialAnalysis materialAnalysis) {
        if (materialAnalysis == null) {
            throw new DaoException("To-one property 'material_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.materialAnalysis = materialAnalysis;
            material_id = materialAnalysis.getId();
            materialAnalysis__resolvedKey = material_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
