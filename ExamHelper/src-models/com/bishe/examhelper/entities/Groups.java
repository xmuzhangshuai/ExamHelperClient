package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.GroupQuestionDao;
import com.bishe.examhelper.dao.GroupsDao;
import com.bishe.examhelper.dao.QuestionTypeDao;
import com.bishe.examhelper.dao.SectionDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GROUPS.
 */
public class Groups implements java.io.Serializable {

    private Long id;
    private Integer question_num;
    private Integer finished_num;
    private Integer error_num;
    private String group_name;
    private long section_id;
    private long questionType_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GroupsDao myDao;

    private Section section;
    private Long section__resolvedKey;

    private QuestionType questionType;
    private Long questionType__resolvedKey;

    private List<GroupQuestion> questionList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Groups() {
    }

    public Groups(Long id) {
        this.id = id;
    }

    public Groups(Long id, Integer question_num, Integer finished_num, Integer error_num, String group_name, long section_id, long questionType_id) {
        this.id = id;
        this.question_num = question_num;
        this.finished_num = finished_num;
        this.error_num = error_num;
        this.group_name = group_name;
        this.section_id = section_id;
        this.questionType_id = questionType_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getQuestion_num() {
        return question_num;
    }

    public void setQuestion_num(Integer question_num) {
        this.question_num = question_num;
    }

    public Integer getFinished_num() {
        return finished_num;
    }

    public void setFinished_num(Integer finished_num) {
        this.finished_num = finished_num;
    }

    public Integer getError_num() {
        return error_num;
    }

    public void setError_num(Integer error_num) {
        this.error_num = error_num;
    }

    public String getGroup_name() {
        return group_name;
    }

    public void setGroup_name(String group_name) {
        this.group_name = group_name;
    }

    public long getSection_id() {
        return section_id;
    }

    public void setSection_id(long section_id) {
        this.section_id = section_id;
    }

    public long getQuestionType_id() {
        return questionType_id;
    }

    public void setQuestionType_id(long questionType_id) {
        this.questionType_id = questionType_id;
    }

    /** To-one relationship, resolved on first access. */
    public Section getSection() {
        long __key = this.section_id;
        if (section__resolvedKey == null || !section__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SectionDao targetDao = daoSession.getSectionDao();
            Section sectionNew = targetDao.load(__key);
            synchronized (this) {
                section = sectionNew;
            	section__resolvedKey = __key;
            }
        }
        return section;
    }

    public void setSection(Section section) {
        if (section == null) {
            throw new DaoException("To-one property 'section_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.section = section;
            section_id = section.getId();
            section__resolvedKey = section_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public QuestionType getQuestionType() {
        long __key = this.questionType_id;
        if (questionType__resolvedKey == null || !questionType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionTypeDao targetDao = daoSession.getQuestionTypeDao();
            QuestionType questionTypeNew = targetDao.load(__key);
            synchronized (this) {
                questionType = questionTypeNew;
            	questionType__resolvedKey = __key;
            }
        }
        return questionType;
    }

    public void setQuestionType(QuestionType questionType) {
        if (questionType == null) {
            throw new DaoException("To-one property 'questionType_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.questionType = questionType;
            questionType_id = questionType.getId();
            questionType__resolvedKey = questionType_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GroupQuestion> getQuestionList() {
        if (questionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupQuestionDao targetDao = daoSession.getGroupQuestionDao();
            List<GroupQuestion> questionListNew = targetDao._queryGroups_QuestionList(id);
            synchronized (this) {
                if(questionList == null) {
                    questionList = questionListNew;
                }
            }
        }
        return questionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuestionList() {
        questionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
