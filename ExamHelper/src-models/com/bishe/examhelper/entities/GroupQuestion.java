package com.bishe.examhelper.entities;

import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.GroupQuestionDao;
import com.bishe.examhelper.dao.GroupsDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GROUP_QUESTION.
 */
public class GroupQuestion implements java.io.Serializable {

    private Long id;
    private long question_id;
    private long group_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GroupQuestionDao myDao;

    private Groups groups;
    private Long groups__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GroupQuestion() {
    }

    public GroupQuestion(Long id) {
        this.id = id;
    }

    public GroupQuestion(Long id, long question_id, long group_id) {
        this.id = id;
        this.question_id = question_id;
        this.group_id = group_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(long question_id) {
        this.question_id = question_id;
    }

    public long getGroup_id() {
        return group_id;
    }

    public void setGroup_id(long group_id) {
        this.group_id = group_id;
    }

    /** To-one relationship, resolved on first access. */
    public Groups getGroups() {
        long __key = this.group_id;
        if (groups__resolvedKey == null || !groups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupsDao targetDao = daoSession.getGroupsDao();
            Groups groupsNew = targetDao.load(__key);
            synchronized (this) {
                groups = groupsNew;
            	groups__resolvedKey = __key;
            }
        }
        return groups;
    }

    public void setGroups(Groups groups) {
        if (groups == null) {
            throw new DaoException("To-one property 'group_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.groups = groups;
            group_id = groups.getId();
            groups__resolvedKey = group_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
