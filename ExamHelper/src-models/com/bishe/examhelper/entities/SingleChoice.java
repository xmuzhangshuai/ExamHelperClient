package com.bishe.examhelper.entities;

import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.SectionDao;
import com.bishe.examhelper.dao.SingleChoiceDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SINGLE_CHOICE.
 */
public class SingleChoice extends Question  implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String question_stem;
    private String optionA;
    private String optionB;
    private String optionC;
    private String optionD;
    private String optionE;
    private String answer;
    private String analysis;
    private String remark;
    private Boolean flag;
    private long section_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SingleChoiceDao myDao;

    private Section section;
    private Long section__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SingleChoice() {
    }

    public SingleChoice(Long id) {
        this.id = id;
    }

    public SingleChoice(Long id, String question_stem, String optionA, String optionB, String optionC, String optionD, String optionE, String answer, String analysis, String remark, Boolean flag, long section_id) {
        this.id = id;
        this.question_stem = question_stem;
        this.optionA = optionA;
        this.optionB = optionB;
        this.optionC = optionC;
        this.optionD = optionD;
        this.optionE = optionE;
        this.answer = answer;
        this.analysis = analysis;
        this.remark = remark;
        this.flag = flag;
        this.section_id = section_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSingleChoiceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getQuestion_stem() {
        return question_stem;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuestion_stem(String question_stem) {
        this.question_stem = question_stem;
    }

    public String getOptionA() {
        return optionA;
    }

    public void setOptionA(String optionA) {
        this.optionA = optionA;
    }

    public String getOptionB() {
        return optionB;
    }

    public void setOptionB(String optionB) {
        this.optionB = optionB;
    }

    public String getOptionC() {
        return optionC;
    }

    public void setOptionC(String optionC) {
        this.optionC = optionC;
    }

    public String getOptionD() {
        return optionD;
    }

    public void setOptionD(String optionD) {
        this.optionD = optionD;
    }

    public String getOptionE() {
        return optionE;
    }

    public void setOptionE(String optionE) {
        this.optionE = optionE;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    public String getAnalysis() {
        return analysis;
    }

    public void setAnalysis(String analysis) {
        this.analysis = analysis;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    public Boolean getFlag() {
        return flag;
    }

    public void setFlag(Boolean flag) {
        this.flag = flag;
    }

    public long getSection_id() {
        return section_id;
    }

    public void setSection_id(long section_id) {
        this.section_id = section_id;
    }

    /** To-one relationship, resolved on first access. */
    public Section getSection() {
        long __key = this.section_id;
        if (section__resolvedKey == null || !section__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SectionDao targetDao = daoSession.getSectionDao();
            Section sectionNew = targetDao.load(__key);
            synchronized (this) {
                section = sectionNew;
            	section__resolvedKey = __key;
            }
        }
        return section;
    }

    public void setSection(Section section) {
        if (section == null) {
            throw new DaoException("To-one property 'section_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.section = section;
            section_id = section.getId();
            section__resolvedKey = section_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String getRightAnswer(){
    	String rightAnswes = null;
    	return rightAnswes;
    }
    // KEEP METHODS END

}
