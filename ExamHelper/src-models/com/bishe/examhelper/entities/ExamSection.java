package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.ExamQuestionDao;
import com.bishe.examhelper.dao.ExamSectionDao;
import com.bishe.examhelper.dao.ExaminationDao;
import com.bishe.examhelper.dao.QuestionTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table EXAM_SECTION.
 */
public class ExamSection implements java.io.Serializable {

    private Long id;
    private String request;
    private Integer question_num;
    private Integer question_score;
    private long questionType_id;
    private long exam_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExamSectionDao myDao;

    private QuestionType questionType;
    private Long questionType__resolvedKey;

    private Examination examination;
    private Long examination__resolvedKey;

    private List<ExamQuestion> examQuestionList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ExamSection() {
    }

    public ExamSection(Long id) {
        this.id = id;
    }

    public ExamSection(Long id, String request, Integer question_num, Integer question_score, long questionType_id, long exam_id) {
        this.id = id;
        this.request = request;
        this.question_num = question_num;
        this.question_score = question_score;
        this.questionType_id = questionType_id;
        this.exam_id = exam_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExamSectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRequest() {
        return request;
    }

    public void setRequest(String request) {
        this.request = request;
    }

    public Integer getQuestion_num() {
        return question_num;
    }

    public void setQuestion_num(Integer question_num) {
        this.question_num = question_num;
    }

    public Integer getQuestion_score() {
        return question_score;
    }

    public void setQuestion_score(Integer question_score) {
        this.question_score = question_score;
    }

    public long getQuestionType_id() {
        return questionType_id;
    }

    public void setQuestionType_id(long questionType_id) {
        this.questionType_id = questionType_id;
    }

    public long getExam_id() {
        return exam_id;
    }

    public void setExam_id(long exam_id) {
        this.exam_id = exam_id;
    }

    /** To-one relationship, resolved on first access. */
    public QuestionType getQuestionType() {
        long __key = this.questionType_id;
        if (questionType__resolvedKey == null || !questionType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionTypeDao targetDao = daoSession.getQuestionTypeDao();
            QuestionType questionTypeNew = targetDao.load(__key);
            synchronized (this) {
                questionType = questionTypeNew;
            	questionType__resolvedKey = __key;
            }
        }
        return questionType;
    }

    public void setQuestionType(QuestionType questionType) {
        if (questionType == null) {
            throw new DaoException("To-one property 'questionType_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.questionType = questionType;
            questionType_id = questionType.getId();
            questionType__resolvedKey = questionType_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Examination getExamination() {
        long __key = this.exam_id;
        if (examination__resolvedKey == null || !examination__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExaminationDao targetDao = daoSession.getExaminationDao();
            Examination examinationNew = targetDao.load(__key);
            synchronized (this) {
                examination = examinationNew;
            	examination__resolvedKey = __key;
            }
        }
        return examination;
    }

    public void setExamination(Examination examination) {
        if (examination == null) {
            throw new DaoException("To-one property 'exam_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.examination = examination;
            exam_id = examination.getId();
            examination__resolvedKey = exam_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ExamQuestion> getExamQuestionList() {
        if (examQuestionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExamQuestionDao targetDao = daoSession.getExamQuestionDao();
            List<ExamQuestion> examQuestionListNew = targetDao._queryExamSection_ExamQuestionList(id);
            synchronized (this) {
                if(examQuestionList == null) {
                    examQuestionList = examQuestionListNew;
                }
            }
        }
        return examQuestionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExamQuestionList() {
        examQuestionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
