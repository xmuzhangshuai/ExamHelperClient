package com.bishe.examhelper.entities;

import java.util.List;
import com.bishe.examhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.bishe.examhelper.dao.CollectionDao;
import com.bishe.examhelper.dao.ErrorQuestionsDao;
import com.bishe.examhelper.dao.GroupsDao;
import com.bishe.examhelper.dao.MaterialAnalysisDao;
import com.bishe.examhelper.dao.MultiChoiceDao;
import com.bishe.examhelper.dao.SectionDao;
import com.bishe.examhelper.dao.SingleChoiceDao;
import com.bishe.examhelper.dao.SubjectDao;
import com.bishe.examhelper.dao.TrueOrFalseDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SECTION.
 */
public class Section implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String section_name;
    private long subject_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SectionDao myDao;

    private Subject subject;
    private Long subject__resolvedKey;

    private List<SingleChoice> singleChoiceList;
    private List<MultiChoice> multiChoiceList;
    private List<TrueOrFalse> trueOrFalseList;
    private List<MaterialAnalysis> MaterialAnalysisList;
    private List<ErrorQuestions> errorQuestionsList;
    private List<Collection> collectionList;
    private List<Groups> groupList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Section() {
    }

    public Section(Long id) {
        this.id = id;
    }

    public Section(Long id, String section_name, long subject_id) {
        this.id = id;
        this.section_name = section_name;
        this.subject_id = subject_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getSection_name() {
        return section_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSection_name(String section_name) {
        this.section_name = section_name;
    }

    public long getSubject_id() {
        return subject_id;
    }

    public void setSubject_id(long subject_id) {
        this.subject_id = subject_id;
    }

    /** To-one relationship, resolved on first access. */
    public Subject getSubject() {
        long __key = this.subject_id;
        if (subject__resolvedKey == null || !subject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubjectDao targetDao = daoSession.getSubjectDao();
            Subject subjectNew = targetDao.load(__key);
            synchronized (this) {
                subject = subjectNew;
            	subject__resolvedKey = __key;
            }
        }
        return subject;
    }

    public void setSubject(Subject subject) {
        if (subject == null) {
            throw new DaoException("To-one property 'subject_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.subject = subject;
            subject_id = subject.getId();
            subject__resolvedKey = subject_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SingleChoice> getSingleChoiceList() {
        if (singleChoiceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SingleChoiceDao targetDao = daoSession.getSingleChoiceDao();
            List<SingleChoice> singleChoiceListNew = targetDao._querySection_SingleChoiceList(id);
            synchronized (this) {
                if(singleChoiceList == null) {
                    singleChoiceList = singleChoiceListNew;
                }
            }
        }
        return singleChoiceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSingleChoiceList() {
        singleChoiceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MultiChoice> getMultiChoiceList() {
        if (multiChoiceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MultiChoiceDao targetDao = daoSession.getMultiChoiceDao();
            List<MultiChoice> multiChoiceListNew = targetDao._querySection_MultiChoiceList(id);
            synchronized (this) {
                if(multiChoiceList == null) {
                    multiChoiceList = multiChoiceListNew;
                }
            }
        }
        return multiChoiceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMultiChoiceList() {
        multiChoiceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrueOrFalse> getTrueOrFalseList() {
        if (trueOrFalseList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrueOrFalseDao targetDao = daoSession.getTrueOrFalseDao();
            List<TrueOrFalse> trueOrFalseListNew = targetDao._querySection_TrueOrFalseList(id);
            synchronized (this) {
                if(trueOrFalseList == null) {
                    trueOrFalseList = trueOrFalseListNew;
                }
            }
        }
        return trueOrFalseList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTrueOrFalseList() {
        trueOrFalseList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MaterialAnalysis> getMaterialAnalysisList() {
        if (MaterialAnalysisList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MaterialAnalysisDao targetDao = daoSession.getMaterialAnalysisDao();
            List<MaterialAnalysis> MaterialAnalysisListNew = targetDao._querySection_MaterialAnalysisList(id);
            synchronized (this) {
                if(MaterialAnalysisList == null) {
                    MaterialAnalysisList = MaterialAnalysisListNew;
                }
            }
        }
        return MaterialAnalysisList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMaterialAnalysisList() {
        MaterialAnalysisList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ErrorQuestions> getErrorQuestionsList() {
        if (errorQuestionsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ErrorQuestionsDao targetDao = daoSession.getErrorQuestionsDao();
            List<ErrorQuestions> errorQuestionsListNew = targetDao._querySection_ErrorQuestionsList(id);
            synchronized (this) {
                if(errorQuestionsList == null) {
                    errorQuestionsList = errorQuestionsListNew;
                }
            }
        }
        return errorQuestionsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetErrorQuestionsList() {
        errorQuestionsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Collection> getCollectionList() {
        if (collectionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CollectionDao targetDao = daoSession.getCollectionDao();
            List<Collection> collectionListNew = targetDao._querySection_CollectionList(id);
            synchronized (this) {
                if(collectionList == null) {
                    collectionList = collectionListNew;
                }
            }
        }
        return collectionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCollectionList() {
        collectionList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Groups> getGroupList() {
        if (groupList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupsDao targetDao = daoSession.getGroupsDao();
            List<Groups> groupListNew = targetDao._querySection_GroupList(id);
            synchronized (this) {
                if(groupList == null) {
                    groupList = groupListNew;
                }
            }
        }
        return groupList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroupList() {
        groupList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
